#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Title   : str2cmt
# Date    : 2018-04-04 21:28:55
# Author  : cynkiller (cyn604@126.com)
# Version : 0.0.1

#--------------------------------------------------
#  @@@@  @@@@@@ @@@@@   @@@@   @@@@  @    @ @@@@@@
# @    @   @@   @    @ @    @ @    @ @@  @@   @@
# @        @@   @    @    @@  @      @ @@ @   @@
#  @@@@    @@   @@@@@    @@   @      @    @   @@
#      @   @@   @    @  @@    @      @    @   @@
# @    @   @@   @    @ @      @    @ @    @   @@
#  @@@@    @@   @    @ @@@@@@  @@@@  @    @   @@
#--------------------------------------------------

import os, sys, getopt
from database import *

def usage():
    message = "str2cmt -c <string to translate> [-s <style>] [-f <fill letter>] [-h|--help]"
    print(message)

def str2cmt(string, style = 'python', fill = '#'):
    # Initialize
    if not style:
        style = 'python'
    if not fill:
        fill = '#'
    if style.lower() == 'python':
        startLetter = '#'
    elif style.lower() == 'c' or style.lower() == 'c++':
        startLetter = '//'

    output = [''] * (ROWHIGHT + 2)
    for i in range(ROWHIGHT + 2):
        output[i] += startLetter
        if i == 0 or i == 8:
            output[i] += '-'
        else:
            output[i] += ' '

    for letter in string:
        letter = letter.upper()
        if letter not in DATABASE.keys():
            print("Letter %s not found in database!" % letter)
            continue
        output[0] += '-' * 7
        output[-1] += '-' * 7
        for i in range(1, 8):
            output[i] += DATABASE[letter][i - 1].replace('#', fill) + ' '
    
    print('\n'.join(output))
    return output

if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hs:c:f:", ["help"])
    except getopt.GetoptError as e:
        print(e)
        usage()
        sys.exit(2)

    style = None
    string = None
    fill = None
    for opt, val in opts:
        if opt == '-s':
            style = val
        elif opt in '-c':
            string = val
        elif opt in '-f':
            fill = val
        elif opt in ("-h", "--help"):
            usage()
            sys.exit()
        else:
            assert False, "unhandled option"
    assert string, "Empty input string!"

    str2cmt(string, style, fill)